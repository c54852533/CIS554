//2017_10_31_Lecture_Merge_loop_vs_recursive
//recursive vs loop implementation
#include <iostream>
#include <vector>
using namespace std;


void merge(vector<int> &vec1, int i1, vector<int> &vec2, int i2, vector<int> &vec4) {
	size_t p1 = i1, p2 = i2;
	while (p1 < vec1.size() || p2 < vec2.size()) {
		if (p1 >= vec1.size()) {
			vec4.push_back(vec2[p2]);
			p2++;
		}
		else if (p2 >= vec2.size()) {
			vec4.push_back(vec1[p1]);
			p1++;

		}
		else {
			if (vec1[p1] < vec2[p2]) {
				vec4.push_back(vec1[p1]);
				p1++;
			}
			else if (vec1[p1] > vec2[p2]) {
				vec4.push_back(vec2[p2]);
				p2++;
			}
			else if (vec1[p1] == vec2[p2]) {
				vec4.push_back(vec1[p1]);
				vec4.push_back(vec2[p2]);
				p1++;
				p2++;
			}
		}
	}
}

void r_merge(vector<int> &vec1, size_t i1, vector<int> &vec2, size_t i2, vector<int> &vec3) {
	if (i1 >= vec1.size() && i2 >= vec2.size()) return;
	if (i1 >= vec1.size()) {
		vec3.push_back(vec2[i2]);
		i2++;
		r_merge(vec1, i1, vec2, i2, vec3);
	}
	else if (i2 >= vec2.size()) {
		vec3.push_back(vec1[i1]);
		i1++;
		r_merge(vec1, i1, vec2, i2, vec3);
	}
	else {
		if (vec1[i1] < vec2[i2]) {
			vec3.push_back(vec1[i1]);
			i1++;
			r_merge(vec1, i1, vec2, i2, vec3);
		}
		else if (vec1[i1] > vec2[i2]) {
			vec3.push_back(vec2[i2]);
			i2++;
			r_merge(vec1, i1, vec2, i2, vec3);
		}
		else if (vec1[i1] == vec2[i2]) {
			vec3.push_back(vec1[i1]);
			vec3.push_back(vec2[i2]);
			i1++;
			i2++;
			r_merge(vec1, i1, vec2, i2, vec3);
		}
	}




}

int main() {
	vector<int> vec1 = { 4, 6, 17, 89, 201 };
	vector<int> vec2 = { 5, 11, 18, 55, 211, 305 };
	vector<int> vec3;
	vector<int> vec4;
	r_merge(vec1, 0, vec2, 0, vec3);
	for (size_t i = 0; i < vec3.size(); i++) {

		cout << vec3[i] << " ";
	}
	cout << endl;

	merge(vec1, 0, vec2, 0, vec4);
	for (size_t i = 0; i < vec3.size(); i++) {

		cout << vec3[i] << " ";
	}
	getchar();
	getchar();
	return 0;
}