//Producer-Comsumer example
#include <iostream>           
#include <thread>             
#include <mutex>              
#include <condition_variable> 

std::mutex mtx;
std::condition_variable cv1;
std::condition_variable cv2;

int meal = 0;

/* Consumer */
void waiter(int ordernumber) {
/*
	mtx.lock();
	meal++;
	mtx.unlock();
*/

	std::unique_lock<std::mutex> lck(mtx);
	while (meal == 0) cv1.wait(lck);
	std::cout << "Order: ";
	std::cout << ordernumber + 1 << " being taken care of with ";
	std::cout << meal - 1 << " meals also ready." << std::endl;
	meal--;
	cv2.notify_one();
}

/* Producer */
void makeMeal(int ordernumber) {
	/*
	mtx.lock();
	meal--;
	mtx.unlock();
	*/

	std::unique_lock<std::mutex> lck(mtx);
	while (meal == 6) cv2.wait(lck); //assume max meal is 6.

	//std::unique_lock<std::mutex> lck(mtx);
	meal++;
	cv1.notify_one();
}

int main() {

	std::thread chefs[10];
	std::thread waiters[10];

	/* Initialize customers and cheifs */
	for (int order = 0; order < 10; order++) {
		chefs[order] = std::thread(makeMeal, order);
		waiters[order] = std::thread(waiter, order);
	}

	/* Join the threads to the main threads */
	for (int order = 0; order < 10; order++) {
		waiters[order].join();
		chefs[order].join();
	}

	return 0;
}
